import{_ as d,C as p,c as n,o,j as t,a as s,aA as a,G as l,w as r}from"./chunks/framework.8SZvSuo1.js";const z=JSON.parse('{"title":"CellLists","description":"","frontmatter":{},"headers":[],"relativePath":"modules/CellLists.md","filePath":"modules/CellLists.md","lastUpdated":null}'),h={name:"modules/CellLists.md"},m={class:"jldocstring custom-block",open:""},T={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.009ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 888 683","aria-hidden":"true"},Q={class:"jldocstring custom-block",open:""},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},g={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.009ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 888 683","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},x={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.43ex",height:"1.357ex",role:"img",focusable:"false",viewBox:"0 -442 1516.2 599.8","aria-hidden":"true"},y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.045ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.943ex",height:"1.64ex",role:"img",focusable:"false",viewBox:"0 -705 417 725","aria-hidden":"true"},w={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.045ex"},xmlns:"http://www.w3.org/2000/svg",width:"0.943ex",height:"1.64ex",role:"img",focusable:"false",viewBox:"0 -705 417 725","aria-hidden":"true"},C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},v={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.378ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 1051 950","aria-hidden":"true"},E={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},_={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.534ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 5540.2 950","aria-hidden":"true"},V={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},j={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.729ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 4742.1 1000","aria-hidden":"true"},F={class:"jldocstring custom-block",open:""},L={class:"jldocstring custom-block",open:""},P={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},A={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.937ex",role:"img",focusable:"false",viewBox:"0 -845 572 856","aria-hidden":"true"},M={class:"jldocstring custom-block",open:""},H={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""};function S(B,e,I,R,N,Z){const i=p("Badge");return o(),n("div",null,[e[72]||(e[72]=t("h1",{id:"CellLists",tabindex:"-1"},[s("CellLists "),t("a",{class:"header-anchor",href:"#CellLists","aria-label":'Permalink to "CellLists {#CellLists}"'},"​")],-1)),t("details",m,[t("summary",null,[e[0]||(e[0]=t("a",{id:"VortexPasta.CellLists",href:"#VortexPasta.CellLists"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists")],-1)),e[1]||(e[1]=s()),l(i,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),e[7]||(e[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CellLists</span></span></code></pre></div>',1)),t("p",null,[e[4]||(e[4]=s("Module implementing the cell lists algorithm over ",-1)),t("mjx-container",T,[(o(),n("svg",u,[...e[2]||(e[2]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D441",d:"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z",style:{"stroke-width":"3"}})])])],-1)])])),e[3]||(e[3]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"N")])],-1))]),e[5]||(e[5]=s("-dimensional periodic domains.",-1))]),e[8]||(e[8]=t("p",null,[s("See the "),t("a",{href:"https://en.wikipedia.org/wiki/Cell_lists",target:"_blank",rel:"noreferrer"},"Wikipedia article"),s(" for some details.")],-1)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[6]||(e[6]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e[73]||(e[73]=t("h2",{id:"Types",tabindex:"-1"},[s("Types "),t("a",{class:"header-anchor",href:"#Types","aria-label":'Permalink to "Types {#Types}"'},"​")],-1)),t("details",Q,[t("summary",null,[e[9]||(e[9]=t("a",{id:"VortexPasta.CellLists.PeriodicCellList",href:"#VortexPasta.CellLists.PeriodicCellList"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists.PeriodicCellList")],-1)),e[10]||(e[10]=s()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[43]||(e[43]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PeriodicCellList{N, T}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rs_cut</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, periods</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{N, Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [nsubdiv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [to_coordinate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identity],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a cell list for dealing with pair interactions.</p>`,2)),t("p",null,[e[13]||(e[13]=s("Above, ",-1)),e[14]||(e[14]=t("code",null,"N",-1)),e[15]||(e[15]=s(" is the number of spatial dimensions, and ",-1)),e[16]||(e[16]=t("code",null,"T",-1)),e[17]||(e[17]=s(" is the type of each element. In the simplest cases, ",-1)),e[18]||(e[18]=t("code",null,"T",-1)),e[19]||(e[19]=s(" can simply describe a coordinate in ",-1)),t("mjx-container",c,[(o(),n("svg",g,[...e[11]||(e[11]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D441",d:"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z",style:{"stroke-width":"3"}})])])],-1)])])),e[12]||(e[12]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"N")])],-1))]),e[20]||(e[20]=s("-dimensional space (e.g. ",-1)),e[21]||(e[21]=t("code",null,"T = SVector{N, Float64}",-1)),e[22]||(e[22]=s("). One can also deal with more complicated elements which include more information. As an example, see further below for how to deal with filament segments in 3D space.",-1))]),e[44]||(e[44]=a('<p>The cutoff radii <code>rs_cut</code> (which can be different in each direction) don&#39;t need to exactly divide the domain period <code>L</code> into equal pieces, but it&#39;s recommended that it does so for performance reasons.</p><p>Optionally, one can choose to subdivide each cell (of size <code>≈ rcut</code>) onto <code>nsubdiv</code> subcells. This can significantly improve performance, since it allows to discard some spurious pair interactions (i.e. beyond the chosen cutoff radius) as described <a href="https://en.wikipedia.org/wiki/Cell_lists#Improvements" target="_blank" rel="noreferrer">here</a>. In practice, a value of <code>2</code> or <code>3</code> can significantly improve performance compared to no subdivision (<code>1</code>). For convenience, it can be passed as <code>nsubdiv = Val(M)</code> or as <code>nsubdiv = static(M)</code>.</p><p>Infinite non-periodic domains (in the sense of <code>period = Infinity()</code>) are not supported.</p><p><strong>Dealing with filament segments</strong></p><p>One of the possible uses of <code>PeriodicCellList</code> is to classify filament segments (which are typically shorter than the cutoff radius) according to their spatial location. In that case, <code>T</code> is not a simple coordinate, but may contain more information including things like (1) the filament the segment belongs to, and (2) the location of the segment within the filament. As there is no unique way of associating a coordinate to a segment, one should pass the <code>to_coordinate</code> argument which &quot;converts&quot; the segment to a coordinate in space. For instance, the passed <code>to_coordinate</code> function may return the midpoint of the segment, which will be used to determine the cell associated to the segment.</p>',5)),t("p",null,[e[35]||(e[35]=s("The applied cutoff radius ",-1)),t("mjx-container",k,[(o(),n("svg",x,[...e[23]||(e[23]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" style="stroke-width:3;"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(444,0)" style="stroke-width:3;"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)" style="stroke-width:3;"></path></g></g></g></g></g>',1)])])),e[24]||(e[24]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mtext",null,"cut")])])])],-1))]),e[36]||(e[36]=s(" should be much larger than the maximum segment length ",-1)),t("mjx-container",y,[(o(),n("svg",f,[...e[25]||(e[25]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"2113",d:"M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z",style:{"stroke-width":"3"}})])])],-1)])])),e[26]||(e[26]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"ℓ")])],-1))]),e[37]||(e[37]=s(", or should at least account for ",-1)),t("mjx-container",w,[(o(),n("svg",b,[...e[27]||(e[27]=[t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"2113",d:"M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z",style:{"stroke-width":"3"}})])])],-1)])])),e[28]||(e[28]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"ℓ")])],-1))]),e[38]||(e[38]=s(". Basically, if one wants an actual cut-off radius ",-1)),t("mjx-container",C,[(o(),n("svg",v,[...e[29]||(e[29]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(451,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₀</text></g></g></g></g>',1)])])),e[30]||(e[30]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",{"data-mjx-pseudoscript":"true"},"₀")])])],-1))]),e[39]||(e[39]=s(", then the applied cutoff radius passed to the constructor should be ",-1)),t("mjx-container",E,[(o(),n("svg",_,[...e[31]||(e[31]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" style="stroke-width:3;"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(444,0)" style="stroke-width:3;"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1000,0)" style="stroke-width:3;"></path></g></g></g><g data-mml-node="mo" transform="translate(1793.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2849.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3300.7,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₀</text></g></g><g data-mml-node="mo" transform="translate(4122.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(5123.2,0)"><path data-c="2113" d="M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z" style="stroke-width:3;"></path></g></g></g>',1)])])),e[32]||(e[32]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mtext",null,"cut")])]),t("mo",null,"="),t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",{"data-mjx-pseudoscript":"true"},"₀")]),t("mo",null,"+"),t("mi",null,"ℓ")])],-1))]),e[40]||(e[40]=s(". Otherwise, a small amount of interactions within ",-1)),t("mjx-container",V,[(o(),n("svg",j,[...e[33]||(e[33]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(729,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₀</text></g></g><g data-mml-node="mo" transform="translate(1551.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2551.4,0)"><path data-c="2113" d="M345 104T349 104T361 95T369 80T352 59Q268 -20 206 -20Q170 -20 146 3T113 53T99 104L94 129Q94 130 79 116T48 86T28 70Q22 70 15 79T7 94Q7 98 12 103T58 147L91 179V185Q91 186 91 191T92 200Q92 282 128 400T223 612T336 705Q397 705 397 636V627Q397 453 194 233Q185 223 180 218T174 211T171 208T165 201L163 186Q159 142 159 123Q159 17 208 17Q228 17 253 30T293 56T335 94Q345 104 349 104ZM360 634Q360 655 354 661T336 668Q328 668 322 666T302 645T272 592Q252 547 229 467T192 330L179 273Q179 272 186 280T204 300T221 322Q327 453 355 590Q360 612 360 634Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2968.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(3413.1,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3864.1,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">₀</text></g></g><g data-mml-node="mo" transform="translate(4464.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width:3;"></path></g></g></g>',1)])])),e[34]||(e[34]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",{"data-mjx-pseudoscript":"true"},"₀")]),t("mo",null,"−"),t("mi",null,"ℓ"),t("mo",null,","),t("mi",null,"r"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",{"data-mjx-pseudoscript":"true"},"₀")]),t("mo",{stretchy:"false"},"]")])],-1))]),e[41]||(e[41]=s(" may be missed.",-1))]),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[42]||(e[42]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e[74]||(e[74]=t("h2",{id:"Functions",tabindex:"-1"},[s("Functions "),t("a",{class:"header-anchor",href:"#Functions","aria-label":'Permalink to "Functions {#Functions}"'},"​")],-1)),t("details",F,[t("summary",null,[e[45]||(e[45]=t("a",{id:"VortexPasta.CellLists.set_elements!",href:"#VortexPasta.CellLists.set_elements!"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists.set_elements!")],-1)),e[46]||(e[46]=s()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[48]||(e[48]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CellLists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set_elements!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(get_element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Np</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Set all elements of the cell list.</p><p>Here <code>get_element(n::Integer)</code> is a function that returns a single element given its index <code>n</code>. It must take and index <code>n</code> in <code>1:Np</code> (this assumes one-based indexing!). <code>Np</code> is the total number of elements.</p><p>This function resets the cell list, removing all previously existent points. It can be used as a replacement for <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#Base.empty!"><code>empty!</code></a> + <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#VortexPasta.CellLists.add_element!"><code>add_element!</code></a> + <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#VortexPasta.CellLists.finalise_cells!"><code>finalise_cells!</code></a>. Currently, this can be particularly interesting because <code>set_elements!</code> is parallelised.</p>',4)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[47]||(e[47]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",L,[t("summary",null,[e[49]||(e[49]=t("a",{id:"VortexPasta.CellLists.add_element!",href:"#VortexPasta.CellLists.add_element!"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists.add_element!")],-1)),e[50]||(e[50]=s()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[56]||(e[56]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_element!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList{N, T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [x⃗])</span></span></code></pre></div><p>Add element to the cell list.</p><p>Determines the cell associated to the element and then appends the element to that cell.</p>',3)),t("p",null,[e[53]||(e[53]=s("Optionally, one may pass the coordinate location ",-1)),t("mjx-container",P,[(o(),n("svg",A,[...e[51]||(e[51]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(313.8,31) translate(-250 0)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)])])),e[52]||(e[52]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mrow",{"data-mjx-texclass":"ORD"},[t("mover",null,[t("mi",null,"x"),t("mo",{stretchy:"false"},"→")])])])],-1))]),e[54]||(e[54]=s(" associated to the element. Otherwise, it will be obtained from the element according to",-1))]),e[57]||(e[57]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x⃗ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> to_coordinate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el)</span></span></code></pre></div><p>where <code>to_coordinate</code> corresponds to the keyword argument of <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#VortexPasta.CellLists.PeriodicCellList"><code>PeriodicCellList</code></a>.</p>',2)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[55]||(e[55]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",M,[t("summary",null,[e[58]||(e[58]=t("a",{id:"VortexPasta.CellLists.finalise_cells!",href:"#VortexPasta.CellLists.finalise_cells!"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists.finalise_cells!")],-1)),e[59]||(e[59]=s()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[61]||(e[61]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CellLists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">finalise_cells!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>&quot;Finalise&quot; cells before iterating over its elements.</p><p>This function performs operations needed to iterate over elements of the cell lists, such as filling ghost cells. It must be called once after all elements have been added to the cell list using <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#VortexPasta.CellLists.add_element!"><code>add_element!</code></a> and before one starts iterating using <a href="/VortexPasta.jl/previews/PR64/modules/CellLists#VortexPasta.CellLists.nearby_elements"><code>nearby_elements</code></a>.</p>',3)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[60]||(e[60]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",H,[t("summary",null,[e[62]||(e[62]=t("a",{id:"Base.empty!",href:"#Base.empty!"},[t("span",{class:"jlbinding"},"Base.empty!")],-1)),e[63]||(e[63]=s()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[66]||(e[66]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">empty!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reset <a href="/VortexPasta.jl/previews/PR64/modules/FilamentIO#VortexPasta.FilamentIO.TimeSeriesFile"><code>TimeSeriesFile</code></a>, removing all entries.</p>',2)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[64]||(e[64]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),e[67]||(e[67]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">empty!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cl</span></span></code></pre></div><p>Remove all elements from the cell list.</p>',2)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[65]||(e[65]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",D,[t("summary",null,[e[68]||(e[68]=t("a",{id:"VortexPasta.CellLists.nearby_elements",href:"#VortexPasta.CellLists.nearby_elements"},[t("span",{class:"jlbinding"},"VortexPasta.CellLists.nearby_elements")],-1)),e[69]||(e[69]=s()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[71]||(e[71]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nearby_elements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PeriodicCellList{N}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x⃗)</span></span></code></pre></div><p>Return an iterator over the elements that are sufficiently close to the point <code>x⃗</code>.</p><p>The iterator returns the elements which are likely to be within the cutoff radius of the point <code>x⃗</code>. More precisely, it returns elements in the same cell as <code>x⃗</code> as well as in neighbouring cells.</p><p>Here <code>x⃗</code> should be a coordinate, usually represented by an <code>SVector{N}</code> or an <code>NTuple{N}</code>.</p>',4)),l(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...e[70]||(e[70]=[t("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const G=d(h,[["render",S]]);export{z as __pageData,G as default};
