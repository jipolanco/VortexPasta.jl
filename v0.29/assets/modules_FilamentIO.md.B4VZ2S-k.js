import{_ as h,C as p,c as o,o as r,j as i,aA as n,a as t,G as e,w as l}from"./chunks/framework.CeH4O1e8.js";const j=JSON.parse('{"title":"FilamentIO","description":"","frontmatter":{},"headers":[],"relativePath":"modules/FilamentIO.md","filePath":"modules/FilamentIO.md","lastUpdated":null}'),d={name:"modules/FilamentIO.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""};function v(T,s,A,D,_,x){const a=p("Badge");return r(),o("div",null,[s[44]||(s[44]=i("h1",{id:"FilamentIO",tabindex:"-1"},[t("FilamentIO "),i("a",{class:"header-anchor",href:"#FilamentIO","aria-label":'Permalink to "FilamentIO {#FilamentIO}"'},"​")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"VortexPasta.FilamentIO",href:"#VortexPasta.FilamentIO"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO")],-1)),s[1]||(s[1]=t()),e(a,{type:"info",class:"jlObjectType jlModule",text:"Module"})]),s[3]||(s[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FilamentIO</span></span></code></pre></div><p>Module defining tools for reading and writing filament data.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[45]||(s[45]=n('<h2 id="VTKHDF-format" tabindex="-1">VTKHDF format <a class="header-anchor" href="#VTKHDF-format" aria-label="Permalink to &quot;VTKHDF format {#VTKHDF-format}&quot;">​</a></h2><p>The <a href="https://docs.vtk.org/en/latest/design_documents/VTKFileFormats.html#vtkhdf-file-format" target="_blank" rel="noreferrer">VTKHDF format</a> can be used to store data from numerical simulations and visualise it using ParaView. It is based on HDF5, meaning that data can be accessed using the HDF5 libraries and tools.</p><h3 id="Writing-data" tabindex="-1">Writing data <a class="header-anchor" href="#Writing-data" aria-label="Permalink to &quot;Writing data {#Writing-data}&quot;">​</a></h3>',3)),i("details",c,[i("summary",null,[s[4]||(s[4]=i("a",{id:"VortexPasta.FilamentIO.write_vtkhdf",href:"#VortexPasta.FilamentIO.write_vtkhdf"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO.write_vtkhdf")],-1)),s[5]||(s[5]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[7]||(s[7]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractFilament}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refinement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dataset_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :PolyData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    parametrisation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    periods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write new VTK HDF file containing a list of filaments.</p><p>A VTK HDF file is an HDF5 file organised in such a way that it can be readily visualised in tools such as ParaView. Data in the file can be readily accessed using HDF5 tools and libraries.</p><p>Following the VTK HDF specification, this function creates a &quot;VTKHDF&quot; group on top of the HDF5 file. Then, it creates the datasets allowing to describe the filaments as an unstructured grid.</p><p>See also the <a href="https://docs.vtk.org/en/latest/design_documents/VTKFileFormats.html#vtkhdf-file-format" target="_blank" rel="noreferrer">VTK documentation</a> for details on the VTK HDF format.</p><p><strong>Extended help</strong></p><p><strong>Relevant datasets</strong></p><p>Some relevant datasets which are written are:</p><ul><li><p><code>/VTKHDF/Points</code>: contains the coordinates of all filament nodes. Points are represented as an array of dimensions <code>(3, Np)</code> where <code>Np</code> is the total number of nodes. Note that the points <em>include the endpoint</em>, meaning that for a closed filament the initial coordinate appears twice in the file. This is done to disambiguate between <em>closed</em> and <em>infinite but unclosed</em> filaments (see <a href="/VortexPasta.jl/v0.29/modules/Filaments#VortexPasta.Filaments.end_to_end_offset"><code>end_to_end_offset</code></a>).</p></li><li><p><code>/VTKHDF/CellData/FilamentIds</code>: contains the filament id associated to each VTK cell. It is a dataset of length <code>Nc</code>, where <code>Nc</code> is the number of cells. In our case a cell is a spatial curve made of discrete points. The ids are <code>Int32</code> values from <code>1</code> to <code>Nf</code>, where <code>Nf</code> is the number of filaments. The values are always sorted increasingly (<code>FilamentIds[i + 1] ≥ FilamentIds[i]</code> for all <code>i</code>). Note that, in general, one cell corresponds to one filament (so that <code>Nc == Nf</code>), but this may not be the case when the <code>periods</code> argument is used and a filament is broken onto multiple curves (see <strong>Periodic wrapping of filaments</strong> below for details).</p></li></ul><p><strong>Attaching extra data</strong></p><p>The optional <code>f</code> argument can be used to attach other data (such as velocity vectors or the current time) to the generated file. This is most conveniently done using the <code>do</code> block syntax. See further below for some examples.</p><p><strong>Optional keyword arguments</strong></p><ul><li><p><code>refinement::Int = 1</code>: allows to output more than 1 point for each filament segment. This is mostly useful for producing nice visualisations. The level of refinement is written to the <code>/VTKHDF/RefinementLevel</code> dataset, which allows to read back the data skipping intra-segment nodes.</p></li><li><p><code>parametrisation::Bool = true</code>: if <code>true</code> (default), write curve parametrisation values. This allows <code>read_vtkhdf</code> to reconstruct the exact same curve that was written (assuming the same discretisation method is used, e.g. cubic splines), even if the curve used some non-default curve parametrisation. Values are written to the <code>/VTKHDF/PointData/Parametrisation</code> dataset.</p></li><li><p><code>dataset_type::Symbol</code>: can be either <code>:PolyData</code> (default) or <code>:UnstructuredGrid</code>. There&#39;s usually no reason to change this.</p></li></ul><p><strong>Periodic wrapping of filaments</strong></p><p>When using periodic boundary conditions, one can use the optional <code>periods</code> argument to periodically wrap the filaments. In this case, one should pass a tuple <code>periods = (Lx, Ly, Lz)</code> with the period in each direction (one can pass <code>nothing</code> if there are non-periodic directions).</p><p>In this case, filaments outside the main periodic box will be translated to fit in the periodic box. Moreover, if a filament locally goes out of the periodic box, it will be broken onto multiple curves so that they all fit within the domain. One can then look at the <code>/VTKHDF/CellData/FilamentIds</code> dataset to determine which curves belong to the same filament.</p><p><strong>Typical usage</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note: the file extension is arbitrary, but ParaView prefers &quot;.vtkhdf&quot; (or &quot;.hdf&quot;) if one</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># wants to use the files for visualisation.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filaments.vtkhdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fs; refinement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, periods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2π</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2π</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2π</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    io[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Velocity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vs  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># adds velocity as VTK point data, assuming vs is a VectorOfVectors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    io[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Curvatures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CurvatureVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># convenient syntax for writing geometric quantities along filaments</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    io[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # adds time as VTK field data, since it&#39;s a scalar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # one can add other fields here...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,18)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[8]||(s[8]=i("a",{id:"Base.setindex!-Tuple{VortexPasta.FilamentIO.VTKHDFFile, AbstractVector{<:AbstractVector}, AbstractString}",href:"#Base.setindex!-Tuple{VortexPasta.FilamentIO.VTKHDFFile, AbstractVector{<:AbstractVector}, AbstractString}"},[i("span",{class:"jlbinding"},"Base.setindex!")],-1)),s[9]||(s[9]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setindex!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VTKHDFFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, vs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractVector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Attach data to filament nodes.</p><p>One generally wants to use the syntax <code>io[name] = vs</code> which calls this function.</p><p>This can be used to write fields defined at filament nodes (for instance, the velocity of each node).</p><p>The data is written to the dataset <code>/VTKHDF/PointData/$name</code>.</p><p>For vector fields (such as velocity), the written dataset has dimensions <code>(3, Np)</code> where <code>Np</code> is the total number of filament nodes (including endpoints). The format is exactly the same as for the <code>Points</code> dataset as detailed in <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.write_vtkhdf"><code>write_vtkhdf</code></a>. As also explained there, the <code>Offsets</code> dataset can be used to recover the values associated to each filament.</p><p><strong>Writing geometric quantities</strong></p><p>It is also possible to write geometric quantities such as unit tangents or curvature vectors along filaments (see <a href="/VortexPasta.jl/v0.29/modules/Filaments#VortexPasta.Filaments.GeometricQuantity"><code>GeometricQuantity</code></a> for a list). For this, one can pass the wanted quantity as the <code>vs</code> argument.</p><p>For example, one can simply do</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">io[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Curvatures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CurvatureVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>to write curvature vectors along each filament.</p>',11)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[12]||(s[12]=i("a",{id:"Base.setindex!-Tuple{VortexPasta.FilamentIO.VTKHDFFile, Any, AbstractString}",href:"#Base.setindex!-Tuple{VortexPasta.FilamentIO.VTKHDFFile, Any, AbstractString}"},[i("span",{class:"jlbinding"},"Base.setindex!")],-1)),s[13]||(s[13]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setindex!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VTKHDFFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data, name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write data as VTK field data to VTK HDF file.</p><p>In VTK, <em>field data</em> refers to data which is not directly attached to the geometry. This is typically small datasets or simple values, such as the current time or simulation parameters.</p><p>Note that scalar data (such as time) is always written as a single-element vector, since otherwise it cannot be parsed by VTK.</p><p>This function interprets everything that is not a vector of vectors as field data.</p>',5)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[46]||(s[46]=i("h3",{id:"Reading-data",tabindex:"-1"},[t("Reading data "),i("a",{class:"header-anchor",href:"#Reading-data","aria-label":'Permalink to "Reading data {#Reading-data}"'},"​")],-1)),i("details",y,[i("summary",null,[s[16]||(s[16]=i("a",{id:"VortexPasta.FilamentIO.read_vtkhdf",href:"#VortexPasta.FilamentIO.read_vtkhdf"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO.read_vtkhdf")],-1)),s[17]||(s[17]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[19]||(s[19]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], filename, T, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretisationMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Read filament locations from VTK HDF file.</p><p>This function loads filaments based on the datasets <code>/VTKHDF/Points</code> and <code>/VTKHDF/Offsets</code> as written by the <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.write_vtkhdf"><code>write_vtkhdf</code></a> function.</p><p>Returns a vector of filaments with precision <code>T</code> (<code>Float32</code> or <code>Float64</code>). Each filament is discretised according to the chosen <code>method</code>. See <a href="/VortexPasta.jl/v0.29/modules/Filaments#VortexPasta.Filaments.init"><code>Filaments.init</code></a> for possible options.</p><p>One can also read other datasets using <code>read</code> and <code>read!</code>, as shown and explained below.</p><p><strong>Extended help</strong></p><p><strong>Typical usage</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vs, t  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># make sure these variables still exist after the \`do\` block</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The returned \`fs\` is a list of filaments.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filaments.vtkhdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CubicSplineMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Velocity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PointData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># here \`vs\` contains one velocity vector per filament node</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FieldData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), Float64))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># note: field data is always written as an array</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # one can read other fields here...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>The available reading functions are:</p><ul><li><p><code>read(io, name::AbstractString, ::PointData)</code> for reading point data (e.g. a velocity field);</p></li><li><p><code>read(io, name::AbstractString, ::FieldData, ::Type{T})</code> for reading field data (i.e. data not attached to filament nodes, such as the current time);</p></li><li><p><code>read!(io, vs::AbstractVector{&lt;:AbstractVector}, name::AbstractString)</code> for reading point data onto a preallocated vector of vectors.</p></li></ul><p><strong>Accessing filament data in <code>do</code> block</strong></p><p>When using the <code>do</code> block syntax as in the above example, one may want to have access to the filament locations <code>fs</code> from within the <code>do</code> block. For instance, this can be useful if one has a preallocated vector of velocities <code>vs</code> which needs to be resized to match the number of filaments and filament nodes, before reading values using <code>read!</code>.</p><p>In fact, <code>fs</code> can be easily obtained from the <code>io</code> object:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filaments.vtkhdf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Float64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CubicSplineMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this is the vector of filaments</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Say we want to resize an existent vector of velocities (must have the right type...):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    resize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vs, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fs))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (v, f) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∈</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> zip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vs, fs)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        resize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f)))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># resize velocities of a single filament</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Now we can read the velocities</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    read!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io, vs, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Velocity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,14)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[47]||(s[47]=i("h3",{id:"Time-series-files",tabindex:"-1"},[t("Time series files "),i("a",{class:"header-anchor",href:"#Time-series-files","aria-label":'Permalink to "Time series files {#Time-series-files}"'},"​")],-1)),i("details",u,[i("summary",null,[s[20]||(s[20]=i("a",{id:"VortexPasta.FilamentIO.TimeSeriesFile",href:"#VortexPasta.FilamentIO.TimeSeriesFile"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO.TimeSeriesFile")],-1)),s[21]||(s[21]=t()),e(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSeriesFile</span></span></code></pre></div><p>Initialise a time series file compatible with ParaView.</p><p>A <a href="https://gitlab.kitware.com/paraview/paraview/-/blob/v5.5.0/Documentation/release/ParaView-5.5.0.md#json-based-new-meta-file-format-for-series-added" target="_blank" rel="noreferrer">ParaView time series file</a> is a JSON which points to a series of VTK files representing a time series. To each VTK file one can associate a (simulation) time.</p><p>One can use this to describe a series of VTKHDF files generated by <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.write_vtkhdf"><code>write_vtkhdf</code></a>. Note that, in this case, the extension of the time series file must be <code>.vtkhdf.series</code>.</p><p><strong>Typical usage</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialise TimeSeriesFile before starting a simulation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Write a VTKHDF file associated to a single time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timestep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rings_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(timestep)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.vtkhdf&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_vtkhdf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, filaments, etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># write VTKHDF file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsf[time] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># add VTKHDF file to time series file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Save the file at the end of the simulation (or at an intermediate time, that&#39;s OK too)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rings.vtkhdf.series&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tsf)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># note: the extension must be .vtkhdf.series to make ParaView happy</span></span></code></pre></div>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[24]||(s[24]=i("a",{id:"Base.setindex!-Tuple{TimeSeriesFile, AbstractString, Real}",href:"#Base.setindex!-Tuple{TimeSeriesFile, AbstractString, Real}"},[i("span",{class:"jlbinding"},"Base.setindex!")],-1)),s[25]||(s[25]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setindex!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add file to time series file.</p><p><strong>Typical usage</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">timestep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rings_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(timestep)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.vtkhdf&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tsf[time] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filename</span></span></code></pre></div>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[28]||(s[28]=i("a",{id:"Base.empty!-Tuple{TimeSeriesFile}",href:"#Base.empty!-Tuple{TimeSeriesFile}"},[i("span",{class:"jlbinding"},"Base.empty!")],-1)),s[29]||(s[29]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">empty!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tsf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reset <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.TimeSeriesFile"><code>TimeSeriesFile</code></a>, removing all entries.</p>',2)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[32]||(s[32]=i("a",{id:"FileIO.save-Tuple{AbstractString, TimeSeriesFile}",href:"#FileIO.save-Tuple{AbstractString, TimeSeriesFile}"},[i("span",{class:"jlbinding"},"FileIO.save")],-1)),s[33]||(s[33]=t()),e(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tsf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tsf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimeSeriesFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Write <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.TimeSeriesFile"><code>TimeSeriesFile</code></a> to a file.</p><p>The filename must have extension <code>.VTKFORMAT.series</code>. In particular, if writing VTKHDF files, the format must be <code>.vtkhdf.series</code>.</p>`,3)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s[48]||(s[48]=i("h2",{id:"Text-format",tabindex:"-1"},[t("Text format "),i("a",{class:"header-anchor",href:"#Text-format","aria-label":'Permalink to "Text format {#Text-format}"'},"​")],-1)),s[49]||(s[49]=i("p",null,"The following functions can be used to dump filament positions (and other quantities defined on filaments) to simple text files, and read positions back. This can be a convenient way of making simulation checkpoints.",-1)),i("details",b,[i("summary",null,[s[36]||(s[36]=i("a",{id:"VortexPasta.FilamentIO.write_to_text",href:"#VortexPasta.FilamentIO.write_to_text"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO.write_to_text")],-1)),s[37]||(s[37]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[39]||(s[39]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractVector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">write_to_text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:AbstractVector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Dump filament locations or other filament data to text file.</p><p>Here <code>fs</code> can be a list of filaments or a list of values (e.g. velocities) on filament nodes.</p><p>The output is a text file where:</p><ul><li><p>each line represents a single filament,</p></li><li><p>node coordinates (or vector values such as velocity) are flattened so that they can be written in a single line,</p></li><li><p>the end node is included. For a closed filament, this means that the first and last written points are identical. This also means that we write <code>N + 1</code> values for a filament of length <code>N</code> (= number of <em>independent</em> nodes).</p></li></ul><p>One can use <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.read_from_text"><code>read_from_text</code></a> to generate filaments from files written by this function.</p>`,6)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[40]||(s[40]=i("a",{id:"VortexPasta.FilamentIO.read_from_text",href:"#VortexPasta.FilamentIO.read_from_text"},[i("span",{class:"jlbinding"},"VortexPasta.FilamentIO.read_from_text")],-1)),s[41]||(s[41]=t()),e(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[43]||(s[43]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read_from_text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretisationMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read_from_text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DiscretisationMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs</span></span></code></pre></div><p>Read filament locations from text file.</p><p>This function can be used to read filament locations written by <a href="/VortexPasta.jl/v0.29/modules/FilamentIO#VortexPasta.FilamentIO.write_to_text"><code>write_to_text</code></a>.</p><p>The type <code>T</code> corresponds to the wanted numerical precision. It is usually <code>Float64</code> or <code>Float32</code>.</p>`,4)),e(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/jipolanco/VortexPasta.jl",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const B=h(d,[["render",v]]);export{j as __pageData,B as default};
