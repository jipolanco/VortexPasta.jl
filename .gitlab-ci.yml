# This is an example .gitlab-ci.yml file to test (and optionally report the coverage
# results of) your [Julia][1] packages. Please refer to the [documentation][2]
# for more information about package development in Julia.
#
# Here, it is assumed that your Julia package is named `VortexFilamentEwald`. Change it to
# whatever name you have given to your package.
#
# [1]: http://julialang.org/
# [2]: https://docs.julialang.org/en/v1/manual/documentation/index.html
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Julia.gitlab-ci.yml

default:
  before_script:
    # This is needed for caching Julia files (compilation, ...), since caching
    # can only be done if the files are in the project directory.
    - export JULIA_DEPOT_PATH=.julia

# Below is the template to run your tests in Julia
.test_template: &test_definition
  stage: test
  # Uncomment below (and adjust as needed) to run the tests for specific references
  # only, such as the default branch, a `development` branch, and so on:
  # rules:
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #   - if: $CI_COMMIT_BRANCH == "development"
  script:
    - |
      julia --project -e '
        using Pkg
        Pkg.instantiate()
        Pkg.build()
        Pkg.test(coverage = true)
      '

  after_script:
    - |
      julia --project=coverage -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage
        coverage = process_folder("src")
        coverage = append!(coverage, process_folder("ext"))
        cl, tl = get_summary(coverage)
        println(cl/tl*100, "% coverage")
        LCOV.writefile("coverage.lcov", coverage)
      '

    # https://docs.gitlab.com/ee/ci/jobs/index.html#custom-collapsible-sections
    - echo -e "\e[0Ksection_start:$(date +%s):apt-get[collapsed=true]\r\e[0KRunning apt-get install python3-pip pipx"
    - apt-get update -qq && apt-get install -qq python3-pip pipx
    - export PIPX_BIN_DIR=~/.local/bin  # make sure that pipx-installed apps are in the path
    - export PATH=$PIPX_BIN_DIR:$PATH
    - echo -e "\e[0Ksection_end:`date +%s`:apt-get\r\e[0K"

    # Install lcov 2.0 and its dependencies
    - echo -e "\e[0Ksection_start:$(date +%s):lcov[collapsed=true]\r\e[0KInstalling lcov and dependencies"
    - >
      apt-get install -qq libcapture-tiny-perl libdatetime-perl libdevel-cover-perl
      libdigest-md5-file-perl libfile-spec-native-perl libjson-xs-perl
      libmemory-usage-perl libtime-hr-perl
    - curl -OL https://github.com/linux-test-project/lcov/releases/download/v2.0/lcov-2.0.tar.gz
    - tar xf lcov-2.0.tar.gz
    - pushd lcov-2.0 && make install && popd
    - lcov --version
    - echo -e "\e[0Ksection_end:`date +%s`:lcov\r\e[0K"

    # This is needed to convert LCOV coverage files to Cobertura format (used by gitlab)
    # We use pipx instead of pip to avoid "externally-managed-environment" error since Debian Bookworm.
    - echo -e "\e[0Ksection_start:$(date +%s):pip[collapsed=true]\r\e[0KRunning pipx install lcov_cobertura"
    - pipx install lcov_cobertura
    - echo -e "\e[0Ksection_end:`date +%s`:pip\r\e[0K"

    - lcov_cobertura coverage.lcov -o coverage.xml

    # Also write HTML report to lcov/ based on lcov files
    - genhtml --no-function-coverage --legend -o lcov_html coverage.lcov  # requires lcov package

  coverage: '/^\d+.\d+% coverage/'

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.lcov
      - coverage.xml
      - lcov_html
  cache:
    key: julia-cache
    paths:
      - .julia/artifacts
      - .julia/compiled
      - .julia/packages
      - .julia/registries

# Name a test and select an appropriate image.
# images comes from Docker hub
test:1.9:
  image: julia:1.9
  <<: *test_definition

# Maybe you would like to test your package against the development branch:
# test:1.1-dev (not sure there is such an image in docker, so not tested yet):
#  image: julia:v1.1-dev
#  # ... allowing for failures, since we are testing against the development
#  # branch:
#  allow_failure: true
#  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.

# Example documentation deployment
pages:
  image: julia:1.9
  dependencies:
    - test:1.9  # use artifacts from test:1.9 (lcov_html)
  stage: deploy
  script:
    - apt-get update -qq && apt-get install -qq git  # needed by Documenter
    - |
      julia --project=docs -e '
        using Pkg
        Pkg.develop(path = ".")
        Pkg.instantiate()
        Pkg.build()
      '
    - julia --project=docs --color=yes docs/make.jl  # make documentation
    - mv docs/build public     # move to the directory picked up by Gitlab pages
    - mv lcov_html public/coverage  # artifact from test:1.9
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  cache:
    key: julia-cache
    paths:
      - .julia/artifacts
      - .julia/compiled
      - .julia/packages
      - .julia/registries

# WARNING: This template is using the `julia` images from [Docker
# Hub][3]. One can use custom Julia images and/or the official ones found
# in the same place. However, care must be taken to correctly locate the binary
# file (`/opt/julia/bin/julia` above), which is usually given on the image's
# description page.
#
# [3]: https://hub.docker.com/_/julia/

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
