# Cache registry and compiled Julia files, mainly to avoid recompilating
# everything every time we run the tests and docs. This should be extended
# (using `extends`) by all jobs which want to use the cache.
.julia-cache:
  before_script:
    # This is needed for caching Julia files (compilation, ...), since caching
    # can only be done if the files are in the project directory.
    - export JULIA_DEPOT_PATH=.julia
    - export JULIA_NUM_THREADS=1  # using more than 1 thread is slower in the CI machines (probably because there are other CI processes running!)
    - export JULIA_NUM_PRECOMPILE_TASKS=1
  cache:
    key: julia-cache
    paths:
      - .julia/artifacts
      - .julia/compiled
      - .julia/packages
      - .julia/registries

.test_template:
  stage: test
  extends:
    - .julia-cache
  rules:
    # Only run tests if source files were modified, or if we're on the main branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - echo "JULIA_NUM_THREADS = $JULIA_NUM_THREADS"
    - echo "JULIA_NUM_PRECOMPILE_TASKS = $JULIA_NUM_PRECOMPILE_TASKS"
    - echo ""
    - |
      julia --heap-size-hint=800M --project -e '
        using Pkg
        Pkg.precompile(; timing = true)
        Pkg.instantiate()
        Pkg.build()
        Pkg.test(coverage = true)
      '

  after_script:
    - |
      julia --heap-size-hint=800M --project=coverage -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage
        coverage = process_folder("src")
        coverage = append!(coverage, process_folder("ext"))
        cl, tl = get_summary(coverage)
        println(cl/tl*100, "% coverage")
        LCOV.writefile("coverage.lcov", coverage)
      '

    # https://docs.gitlab.com/ee/ci/jobs/index.html#custom-collapsible-sections
    - echo -e "\e[0Ksection_start:$(date +%s):apt-get[collapsed=true]\r\e[0KRunning apt-get install python3-pip pipx"
    - apt-get update -qq && apt-get install -qq python3-pip pipx
    - export PIPX_BIN_DIR=~/.local/bin  # make sure that pipx-installed apps are in the path
    - export PATH=$PIPX_BIN_DIR:$PATH
    - echo -e "\e[0Ksection_end:`date +%s`:apt-get\r\e[0K"

    # Install lcov 2.0 and its dependencies
    - echo -e "\e[0Ksection_start:$(date +%s):lcov[collapsed=true]\r\e[0KInstalling lcov and dependencies"
    - >
      apt-get install -qq libcapture-tiny-perl libdatetime-perl libdevel-cover-perl
      libdigest-md5-file-perl libfile-spec-native-perl libjson-xs-perl
      libmemory-usage-perl libtime-hr-perl
    - curl -OL https://github.com/linux-test-project/lcov/releases/download/v2.0/lcov-2.0.tar.gz
    - tar xf lcov-2.0.tar.gz
    - pushd lcov-2.0 && make install && popd
    - lcov --version
    - echo -e "\e[0Ksection_end:`date +%s`:lcov\r\e[0K"

    # This is needed to convert LCOV coverage files to Cobertura format (used by gitlab)
    # We use pipx instead of pip to avoid "externally-managed-environment" error since Debian Bookworm.
    - echo -e "\e[0Ksection_start:$(date +%s):pip[collapsed=true]\r\e[0KRunning pipx install lcov_cobertura"
    - pipx install lcov_cobertura
    - echo -e "\e[0Ksection_end:`date +%s`:pip\r\e[0K"

    - lcov_cobertura coverage.lcov -o coverage.xml

    # Also write HTML report to lcov/ based on lcov files
    - genhtml --no-function-coverage --legend -o lcov_html coverage.lcov  # requires lcov package

  coverage: '/^\d+.\d+% coverage/'

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.lcov
      - coverage.xml
      - lcov_html
    expire_in: 1 week

# Name a test and select an appropriate image.
# images comes from Docker hub
test:julia-latest:
  image: julia:1.10
  extends: .test_template

docs:
  image: julia:1.10
  stage: test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH       # run on master branch
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'  # run on merge requests
  script:
    - echo "JULIA_NUM_THREADS = $JULIA_NUM_THREADS"
    - apt-get update -qq
    - apt-get install -qq git  # needed by Documenter

    # This is to be able to render GLMakie figures on the server
    # See https://github.com/MakieOrg/Makie.jl/blob/master/.github/workflows/glmakie.yaml
    - apt-get install -qq xorg-dev mesa-utils xvfb libgl1 freeglut3-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev xsettingsd x11-xserver-utils

    - |
      DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --heap-size-hint=800M --project=docs -e '
        using Pkg
        Pkg.Registry.update()
        Pkg.develop(path = ".")
        Pkg.precompile(; timing = true)
        Pkg.instantiate()
        Pkg.build()
      '

    - DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' julia --heap-size-hint=800M --project=docs --color=yes docs/make.jl

  artifacts:
    paths:
      - docs/build
    expire_in: 1 week
  extends:
    - .julia-cache

pages:
  image: julia:1.10
  stage: deploy
  dependencies:
    - test:julia-latest  # use coverage from test:julia-latest (lcov_html)
    - docs
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - public
    expire_in: 1 week
  script:
    - |
      if [[ -d docs/build ]]; then
        mv -v docs/build public
        if [[ -d lcov_html ]]; then
          mv -v lcov_html public/coverage
        fi
      fi

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
