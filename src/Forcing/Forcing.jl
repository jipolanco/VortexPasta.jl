"""
    Forcing

Defines methods for injecting and dissipating the energy generated by a system of vortices.
"""
module Forcing

using ..Filaments: Filaments, AbstractFilament, UnitTangent, Derivative, UnitTangent
using ..BiotSavart: BiotSavart, BiotSavartCache
using ..SyntheticFields: SyntheticFields, FourierBandVectorField
using LinearAlgebra: Ã—
using KernelAbstractions: KernelAbstractions as KA
using OhMyThreads: Scheduler, SerialScheduler, tforeach, tmapreduce

using Adapt: adapt

export AbstractForcing, AbstractDissipation, NoForcing, NoDissipation,
    NormalFluidForcing, FourierBandForcing, FourierBandForcingBS, SmallScaleDissipationBS

"""
    AbstractForcing

Abstract type representing a forcing method.

Note that, in general, all forcing methods can also be used as dissipation methods (e.g. by
setting forcing coefficients to a negative value).
"""
abstract type AbstractForcing end

"""
    AbstractDissipation

Abstract type representing a dissipation method (via an extra dissipation term in the vortex
velocity).
"""
abstract type AbstractDissipation end

"""
    NoForcing() <: AbstractForcing

Represents the absence of external forcing.
"""
struct NoForcing <: AbstractForcing end

init_cache(::NoForcing, args...) = nothing  # called when forcing is disabled

"""
    NoDissipation() <: AbstractDissipation

Repersents the absence of dissipation term.
"""
struct NoDissipation <: AbstractDissipation end

init_cache(::NoDissipation, args...) = nothing  # called when dissipation term is disabled

"""
    Forcing.apply!(forcing::AbstractForcing, vs::AbstractVector{<:Vec3}, f::AbstractFilament; [scheduler])

Apply forcing to a single filament `f` with self-induced velocities `vs`.

At output, the `vs` vector is overwritten with the actual vortex line velocities.

The optional `scheduler` keyword can be used to parallelise computations using one of the
[schedulers defined in OhMyThreads.jl](https://juliafolds2.github.io/OhMyThreads.jl/stable/refs/api/#Schedulers).

---

    Forcing.apply!(forcing::NormalFluidForcing, vs, vn, tangents; [scheduler])

This variant can be used in the case of a [`NormalFluidForcing`](@ref) if one already has
precomputed values of the normal fluid velocity and local unit tangents at filament points.
"""
function apply! end

include("normal_fluid.jl")
include("fourier_band.jl")
include("fourier_band_bs.jl")
include("dissipation_bs.jl")

end
