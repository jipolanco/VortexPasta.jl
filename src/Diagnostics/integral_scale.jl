@doc raw"""
    integral_lengthscale(ks::AbstractVector, Ek::AbstractVector, Etot::Real, Lvort::Real, p::ParamsBiotSavart) -> Real
    integral_lengthscale(ks::AbstractVector, Ek::AbstractVector, Etot::Real, Lvort::Real, iter::VortexFilamentSolver) -> Real
    integral_lengthscale(ks::AbstractVector, Ek::AbstractVector, [Etot::Real]) -> Real

Integral length scale associated to velocity field.

The first two variants (taking `Etot` and `Lvort` parameters) should be preferred to compute the
integral length scale of a superfluid flow.

The last one may be used for smooth velocity fields such that the energy spectrum quickly
decays to zero. Note that, if the total kinetic energy `Etot` is not passed, then it is directly estimated
from the spectrum.

# Dependencies

Before calling this function, one first needs to:

- call [`Diagnostics.energy_spectrum`](@ref) (or [`Diagnostics.energy_spectrum!`](@ref)) to obtain `ks` and `Ek`;

- call [`Diagnostics.kinetic_energy`](@ref) to obtain `Etot` (total kinetic energy);

- call [`Diagnostics.filament_length`](@ref) to obtain `Lvort` (total vortex length).

# Definition

The integral length scale can be defined from the energy spectrum ``E(k)`` as

```math
L_0
= \frac{π}{2 v_{\text{rms}}^2} \int_0^∞ \frac{E(k)}{k} \, \mathrm{d}k
= \frac{3π}{4E} \int_0^∞ \frac{E(k)}{k} \, \mathrm{d}k
```

(see e.g. Pope 2000, eq. 6.225). Note that the velocity variance can be related to the
kinetic energy ``E`` (`Etot`) simply by ``E = (3/2) v_{\text{rms}}^2`` in three dimensions.

For a non-smooth velocity field such as the one generated by vortex lines, ``E(k)`` decays
slowly (as ``k^{-1}``). Therefore, if we truncate the above integral (which converges) at
some maximum wavenumber ``k_{\text{max}}``, we necessarily incur some truncation error which
may be non-negligible. For this reason, we estimate the contribution beyond
``k_{\text{max}}`` by assuming that the spectrum takes the form ``E(k) = (Γ^2 L_v / 4πV) k^{-1}``,
where ``L_v`` is the total vortex length (`Lvort`) and ``V`` the volume of the periodic
domain (see e.g. [Polanco2024](@citet)).
"""
function integral_lengthscale end

# Smooth velocity field (easy)
function integral_lengthscale(ks::AbstractVector{T}, Ek::AbstractVector{T}) where {T}
    Etot = sum(Ek) * (ks[2] - ks[1])
    integral_lengthscale(ks, Ek, Etot)
end

function integral_lengthscale(ks::AbstractVector{T}, Ek::AbstractVector{T}, Etot::T) where {T}
    @assert ks[1] == 0  # zero mode is included (we discard it)
    dk = ks[2]
    integ = zero(T)
    for i in eachindex(ks, Ek)[2:end]
        integ += Ek[i] * dk / ks[i]
    end
    T(3π/4) * integ / Etot
end

function integral_lengthscale(
        ks::AbstractVector{T}, Ek::AbstractVector{T}, Etot::T, Lvort::T, params::ParamsBiotSavart{T}
    ) where {T}
    (; Ls, Γ,) = params
    V = prod(Ls)
    kmax = ks[end]
    L_small_k::T = integral_lengthscale(ks, Ek, Etot)  # large-scale contribution
    L_large_k::T = T(3/16) * Γ^2 * Lvort / (V * Etot * kmax)  # this assumes 3π/4 constant in definition
    L_small_k + L_large_k
end
